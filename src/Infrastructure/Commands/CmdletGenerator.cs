// <auto-generated />
namespace PowerShell.Infrastructure
{
    internal static partial class PowerShellFactory
    {
        public const string ProductKey = "ProductKey";
        public const string GetProductKeyCmdlet = "Get-ProductKey";
        public const string Workstation = "Workstation";
        public const string StopWorkstationCmdlet = "Stop-Workstation";
        public const string RestartWorkstationCmdlet = "Restart-Workstation";
        public const string EscapedString = "EscapedString";
        public const string ConvertFromEscapedStringCmdlet = "ConvertFrom-EscapedString";
        public const string ConvertToEscapedStringCmdlet = "ConvertTo-EscapedString";
        public const string PascalCase = "PascalCase";
        public const string ConvertToPascalCaseCmdlet = "ConvertTo-PascalCase";
        public const string CamelCase = "CamelCase";
        public const string ConvertToCamelCaseCmdlet = "ConvertTo-CamelCase";
        public const string Assembly = "Assembly";
        public const string ResolveAssemblyCmdlet = "Resolve-Assembly";
        public const string GetAssemblyCmdlet = "Get-Assembly";
        public const string RegisterAssemblyCmdlet = "Register-Assembly";
        public const string UnregisterAssemblyCmdlet = "Unregister-Assembly";
        public const string PendingReboot = "PendingReboot";
        public const string TestPendingRebootCmdlet = "Test-PendingReboot";
    }
}
// <auto-generated />
namespace PowerShell.Infrastructure.Commands
{
    using PowerShell.Infrastructure.Utilities;
    using PowerShell.Infrastructure.Fusion;
    using Microsoft.Management.Infrastructure;
    using System.Management.Automation;


    [Alias("pkey")]
    [Cmdlet(VerbsCommon.Get, ProductKeyName)]
    public partial class GetProductKeyCommand : AbstractPSCmdlet
    {
        private const string ProductKeyName = "ProductKey";

        [Parameter]
        public ProductKey ProductKey { get; set; }


        public override string ToString() => PowerShellFactory.GetProductKeyCmdlet;
    }

    [Alias("reboot")]
    [Cmdlet(VerbsLifecycle.Stop, WorkstationName, SupportsShouldProcess = true)]
    public partial class StopWorkstationCommand : AbstractPSCmdlet
    {
        private const string WorkstationName = "Workstation";

        [Parameter]
        public string ComputerName { get; set; }

        [Parameter]
        public PSCredential Credential { get; set; }

        [Parameter]
        public SwitchParameter Force { get; set; }


        public override string ToString() => PowerShellFactory.StopWorkstationCmdlet;
    }

    [Alias("reboot")]
    [Cmdlet(VerbsLifecycle.Restart, WorkstationName, SupportsShouldProcess = true)]
    public partial class RestartWorkstationCommand : AbstractPSCmdlet
    {
        private const string WorkstationName = "Workstation";

        [Parameter]
        public string ComputerName { get; set; }

        [Parameter]
        public PSCredential Credential { get; set; }

        [Parameter]
        public SwitchParameter Force { get; set; }


        public override string ToString() => PowerShellFactory.RestartWorkstationCmdlet;
    }

    [Cmdlet(VerbsData.ConvertFrom, EscapedStringName)]
    public partial class ConvertFromEscapedStringCommand : AbstractPSCmdlet
    {
        private const string EscapedStringName = "EscapedString";

        [Parameter]
        public PSObject InputObject { get; set; }

        [Parameter]
        public EscapeStyle Style { get; set; }


        public override string ToString() => PowerShellFactory.ConvertFromEscapedStringCmdlet;
    }

    [Cmdlet(VerbsData.ConvertTo, EscapedStringName)]
    public partial class ConvertToEscapedStringCommand : AbstractPSCmdlet
    {
        private const string EscapedStringName = "EscapedString";

        [Parameter]
        public PSObject InputObject { get; set; }

        [Parameter]
        public EscapeStyle Style { get; set; }


        public override string ToString() => PowerShellFactory.ConvertToEscapedStringCmdlet;
    }

    [Cmdlet(VerbsData.ConvertTo, PascalCaseName)]
    public partial class ConvertToPascalCaseCommand : AbstractPSCmdlet
    {
        private const string PascalCaseName = "PascalCase";

        [Parameter]
        public PSObject InputObject { get; set; }


        public override string ToString() => PowerShellFactory.ConvertToPascalCaseCmdlet;
    }

    [Cmdlet(VerbsData.ConvertTo, CamelCaseName)]
    public partial class ConvertToCamelCaseCommand : AbstractPSCmdlet
    {
        private const string CamelCaseName = "CamelCase";

        [Parameter]
        public PSObject InputObject { get; set; }


        public override string ToString() => PowerShellFactory.ConvertToCamelCaseCmdlet;
    }

    [Cmdlet(VerbsDiagnostic.Resolve, AssemblyName)]
    public partial class ResolveAssemblyCommand : AbstractPSCmdlet
    {
        private const string AssemblyName = "Assembly";

        [Parameter(ParameterSetName = "Path")]
        public string Path { get; set; }

        [Parameter(ParameterSetName = "PartialName")]
        public string PartialName { get; set; }


        public override string ToString() => PowerShellFactory.ResolveAssemblyCmdlet;
    }

    [Alias("gasm")]
    [Cmdlet(VerbsCommon.Get, AssemblyName)]
    public partial class GetAssemblyCommand : AbstractPSCmdlet, IDynamicParameters
    {
        private const string AssemblyName = "Assembly";

        [Parameter]
        public string Load { get; set; }

        [Parameter]
        public string LoadFrom { get; set; }

        [Parameter]
        public SwitchParameter All { get; set; }
        protected bool NameParameterSpecified
        {
            get
            {
                return MyInvocation.BoundParameters.ContainsKey("Name");
            }
        }

        protected string NameParameterValue
        {
            get
            {
                return (string) _dynamicParameters["Name"].Value;
            }
        }


        public override string ToString() => PowerShellFactory.GetAssemblyCmdlet;
    }

    [Alias("rasm")]
    [Cmdlet(VerbsLifecycle.Register, AssemblyName)]
    public partial class RegisterAssemblyCommand : AbstractPSCmdlet
    {
        private const string AssemblyName = "Assembly";

        [Parameter(Mandatory = true)]
        public string Path { get; set; }

        [Parameter]
        public InstallBehaviour InstallBehavior { get; set; }


        public override string ToString() => PowerShellFactory.RegisterAssemblyCmdlet;
    }

    [Alias("uasm")]
    [Cmdlet(VerbsLifecycle.Unregister, AssemblyName)]
    public partial class UnregisterAssemblyCommand : AbstractPSCmdlet, IDynamicParameters
    {
        private const string AssemblyName = "Assembly";

        [Parameter(ParameterSetName = "ByPath")]
        public string Path { get; set; }
        protected bool NameParameterSpecified
        {
            get
            {
                return MyInvocation.BoundParameters.ContainsKey("Name");
            }
        }

        protected string NameParameterValue
        {
            get
            {
                return (string) _dynamicParameters["Name"].Value;
            }
        }


        public override string ToString() => PowerShellFactory.UnregisterAssemblyCmdlet;
    }

    [Alias("tpr")]
    [Cmdlet(VerbsDiagnostic.Test, PendingRebootName)]
    public partial class TestPendingRebootCommand : AbstractPSCmdlet
    {
        private const string PendingRebootName = "PendingReboot";

        [Parameter]
        public string ComputerName { get; set; }

        [Parameter]
        public PSCredential Credential { get; set; }

        [Parameter]
        public SwitchParameter Force { get; set; }


        public override string ToString() => PowerShellFactory.TestPendingRebootCmdlet;
    }
}
