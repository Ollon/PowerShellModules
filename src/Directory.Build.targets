<?xml version="1.0" encoding="utf-8"?>
<!--
***********************************************************************************************
Directory.Build.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) Ollon, LLC. All rights reserved. 
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">



  <Import Project="$(VsToolsPath)\VSSDK\Microsoft.VsSDK.targets" Condition="'$(ImportVSSDKTargets)' == 'true'" />

  <!--                           -->
  <!--   Assembly Search Paths   -->
  <!--                           -->
  <PropertyGroup>
    <AssemblyFoldersSuffix>AssemblyFoldersEx</AssemblyFoldersSuffix>
    <FrameworkRegistryBase>Software\Microsoft\.NETFramework</FrameworkRegistryBase>
    <ProjectSystemExtensionDir>$(DevEnvDir)CommonExtensions\Microsoft\Project\</ProjectSystemExtensionDir>
    <NuGetExtensionDir>$(DevEnvDir)CommonExtensions\Microsoft\NuGet\</NuGetExtensionDir>
    <LanguageServicesDir>$(DevEnvDir)CommonExtensions\Microsoft\ManagedLanguages\VBCSharp\LanguageServices\</LanguageServicesDir>
    <CommonAssembliesDir>$([System.IO.Path]::GetFullPath('$(DevEnvDir)..\..\VSSDK\VisualStudioIntegration\Common\Assemblies\v4.0\'))</CommonAssembliesDir>
    <PrivateAssemblies>$(DevEnvDir)PrivateAssemblies\</PrivateAssemblies>
    <PublicAssemblies>$(DevEnvDir)PublicAssemblies\</PublicAssemblies>
    <AssemblySearchPaths>
      $(SolutionDir)Lib\;
      $(MSBuildExtensionsPath)\$(VisualStudioVersion)\Bin\;
      $(MSBuildExtensionsPath)\$(VisualStudioVersion)\Bin\Roslyn\;
      $(ProjectSystemExtensionDir);
      $(NuGetExtensionDir);
      $(LanguageServicesDir);
      $(ReferencePath);
      {CandidateAssemblyFiles};
      {HintPathFromItem};
      {TargetFrameworkDirectory};
      {RawFileName};
      {GAC};
      {Registry:$(FrameworkRegistryBase),$(TargetFrameworkVersion),$(AssemblyFoldersSuffix)$(AssemblyFoldersExConditions)};
      $(DevEnvDir);
      $(PrivateAssemblies);
      $(PublicAssemblies);
      $(CommonAssembliesDir);
    </AssemblySearchPaths>
    <DesignTimeAssemblySearchPaths>$(AssemblySearchPaths)</DesignTimeAssemblySearchPaths>
  </PropertyGroup>

  <!--                           -->
  <!--   Generate AssemblyInfo   -->
  <!--                           -->

  <PropertyGroup>
    <GeneratedAssemblyInfoFile>$(IntermediateOutputPath)GeneratedAssemblyInfo_$(BuildVersion)$(GeneratedFileExtension)</GeneratedAssemblyInfoFile>
    <InternalsVisibleToSuffix>, PublicKey=$(PublicKey)</InternalsVisibleToSuffix>
    <GeneratedInternalsVisibleToFile>$(IntermediateOutputPath)GeneratedInternalsVisibleTo$(GeneratedFileExtension)</GeneratedInternalsVisibleToFile>
  </PropertyGroup>

  <ItemGroup>
    <AssemblyVersionAttribute Include="System.Reflection.AssemblyTitleAttribute">
      <_Parameter1>$(AssemblyName)</_Parameter1>
    </AssemblyVersionAttribute>
    <AssemblyVersionAttribute Include="System.Reflection.AssemblyCompanyAttribute">
      <_Parameter1>$(Company)</_Parameter1>
    </AssemblyVersionAttribute>
    <AssemblyVersionAttribute Include="System.Reflection.AssemblyCopyrightAttribute">
      <_Parameter1>$(Copyright)</_Parameter1>
    </AssemblyVersionAttribute>
    <AssemblyVersionAttribute Include="System.Reflection.AssemblyProductAttribute">
      <_Parameter1>$(AssemblyName)</_Parameter1>
    </AssemblyVersionAttribute>
    <AssemblyVersionAttribute Include="System.Reflection.AssemblyDescriptionAttribute">
      <_Parameter1>$(AssemblyName)</_Parameter1>
    </AssemblyVersionAttribute>
    <AssemblyVersionAttribute Include="System.Reflection.AssemblyVersionAttribute">
      <_Parameter1>$(AssemblyVersion)</_Parameter1>
    </AssemblyVersionAttribute>
    <AssemblyVersionAttribute Include="System.Reflection.AssemblyFileVersionAttribute">
      <_Parameter1>$(BuildVersion)</_Parameter1>
    </AssemblyVersionAttribute>
    <AssemblyVersionAttribute Include="System.Reflection.AssemblyInformationalVersionAttribute">
      <_Parameter1>$(BuildVersion)</_Parameter1>
    </AssemblyVersionAttribute>
  </ItemGroup>

  <!--                                 -->
  <!--   Generate InternalsVisibleTo   -->
  <!--                                 -->

  <Target Name="GenerateAssemblyInfoFile" Inputs="$(MSBuildThisFileFullPath)" Outputs="$(GeneratedAssemblyInfoFile)" DependsOnTargets="PrepareForBuild">

    <WriteCodeFragment AssemblyAttributes="@(AssemblyVersionAttribute)" Language="$(Language)" OutputFile="$(GeneratedAssemblyInfoFile)">
      <Output TaskParameter="OutputFile" ItemName="Compile" />
      <Output TaskParameter="OutputFile" ItemName="FileWrites" />
    </WriteCodeFragment>

  </Target>

  <PropertyGroup>
    <CoreCompileDependsOn>
      GenerateAssemblyInfoFile;
      $(CoreCompileDependsOn)
    </CoreCompileDependsOn>
  </PropertyGroup>

  <ItemDefinitionGroup>
    <InternalsVisibleTo>
      <Visible>false</Visible>
    </InternalsVisibleTo>
  </ItemDefinitionGroup>

  <Target Name="GenerateInternalsVisibleToFile" Inputs="$(MSBuildThisFileFullPath);$(MSBuildProjectFile)" Outputs="$(GeneratedInternalsVisibleToFile)" DependsOnTargets="PrepareForBuild">
    <ItemGroup>
      <InternalsVisibleTo Include="$(InternalsVisibleTo)" />
    </ItemGroup>

    <CreateItem Include="System.Runtime.CompilerServices.InternalsVisibleToAttribute" AdditionalMetadata="_Parameter1=%(InternalsVisibleTo.Identity)$(InternalsVisibleToSuffix)">
      <Output TaskParameter="Include" ItemName="InternalsVisibleToAttribute" />
    </CreateItem>

    <WriteCodeFragment AssemblyAttributes="@(InternalsVisibleToAttribute)" Language="$(Language)" OutputFile="$(GeneratedInternalsVisibleToFile)">
      <Output TaskParameter="OutputFile" ItemName="Compile" />
      <Output TaskParameter="OutputFile" ItemName="FileWrites" />
    </WriteCodeFragment>

  </Target>

  <PropertyGroup>
    <CoreCompileDependsOn>
      GenerateInternalsVisibleToFile;
      $(CoreCompileDependsOn)
    </CoreCompileDependsOn>
  </PropertyGroup>

  <!--           -->
  <!--   VSSDK   -->
  <!--           -->

  <Target Name="LinkVSSDKEmbeddableAssemblies" AfterTargets="ResolveReferences" BeforeTargets="FindReferenceAssembliesForReferences">
    <ItemGroup>
      <!--<VSCTCompile Condition="
              '%(Extension)' == '.vsct'
           " Include="%(FullPath)">
        <ResourceName>Menus.ctmenu</ResourceName>
      </VSCTCompile>-->
      <ReferencePath Condition="
              '%(FileName)' == 'Microsoft.VisualStudio.Imaging.Interop.14.0.DesignTime'
           or '%(FileName)' == 'Microsoft.VisualStudio.Imaging.Interop.15.0.DesignTime'
           or '%(FileName)' == 'Microsoft.VisualStudio.Setup.Configuration.Interop'
           or '%(FileName)' == 'Microsoft.VisualStudio.Shell.Embeddable'
           or '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.10.0'
           or '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.11.0'
           or '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.12.0'
           or '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.12.1.DesignTime'
           or '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.14.0.DesignTime'
           or '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.15.0.DesignTime'
           or '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.15.3.DesignTime'
           or '%(FileName)' == 'Microsoft.VisualStudio.TextManager.Interop.11.0'
           or '%(FileName)' == 'Microsoft.VisualStudio.TextManager.Interop.12.0'
           or '%(FileName)' == 'Microsoft.VisualStudio.TextManager.Interop.12.1.DesignTime'
           or '%(FileName)' == 'Microsoft.VisualStudio.TextManager.Interop.14.2.DesignTime'
           or '%(FileName)' == 'Microsoft.VisualStudio.TextManager.Interop.15.1.DesignTime'
           or '%(FileName)' == 'Microsoft.VisualStudio.Feedback.Interop.12.0.DesignTime'
           or '%(FileName)' == 'Microsoft.VisualStudio.ProjectSystem.Interop'
           or '%(FileName)' == 'NuGet.VisualStudio'
           or '%(FileName)' == 'stdole'
           or '%(FileName)' == 'microsoft.visualstudio.designer.interfaces'
           or '%(FileName)' == 'EnvDTE80'
           or '%(FileName)' == 'EnvDTE90'
           or '%(FileName)' == 'EnvDTE100'
           or '%(FileName)' == 'Microsoft.VisualStudio.CommandBars'
           or '%(FileName)' == 'Microsoft.Internal.VisualStudio.Shell.Interop.10.0.DesignTime'
           or '%(FileName)' == 'Microsoft.Internal.VisualStudio.Shell.Interop.11.0.DesignTime'
           or '%(FileName)' == 'Microsoft.Internal.VisualStudio.Shell.Interop.14.0.DesignTime'
           or '%(FileName)' == 'Microsoft.Internal.VisualStudio.Shell.Interop.14.1.DesignTime'
           or '%(FileName)' == 'Microsoft.Internal.VisualStudio.Shell.Interop.14.2.DesignTime'
           or '%(FileName)' == 'Microsoft.Internal.VisualStudio.Shell.Embeddable'
              ">
        <EmbedInteropTypes>true</EmbedInteropTypes>
      </ReferencePath>
    </ItemGroup>
  </Target>

  <PropertyGroup Condition="'$(CreateVsixContainer)' == 'true'">
    <GetVsixSourceItemsDependsOn>IncludeNuGetResolvedAssets;$(GetVsixSourceItemsDependsOn)</GetVsixSourceItemsDependsOn>
  </PropertyGroup>

  <Target Name="IncludeNuGetResolvedAssets" AfterTargets="ResolveReferences" Condition="'$(CreateVsixContainer)' == 'true'">
    <ItemGroup>
      <_ReferenceCopyLocalPathsWithPotentialInclusions Include="@(ReferenceCopyLocalPaths)" />
      <VSIXCopyLocalReferenceSourceItem Include="@(_ReferenceCopyLocalPathsWithPotentialInclusions)">
        <ForceIncludeInVsix>true</ForceIncludeInVsix>
        <Private>true</Private>
      </VSIXCopyLocalReferenceSourceItem>
    </ItemGroup>
  </Target>

  <Target Name="VSIXIdentifierProjectOutputGroup" Condition="'$(CreateVsixContainer)' == 'false'" />
  <Target Name="VSIXNameProjectOutputGroup" Condition="'$(CreateVsixContainer)' == 'false'" />

  <PropertyGroup Condition="'$(DeployExtension)' == 'true'">
    <StartAction>Program</StartAction>
    <StartProgram Condition="'$(DevEnvDir)' != ''">$(DevEnvDir)devenv.exe</StartProgram>
    <StartArguments>/rootsuffix Exp</StartArguments>
  </PropertyGroup>

  <Target Name="CreateDebuggableModule" AfterTargets="AfterBuild" Condition="'$(IsPowerShellProject)'=='true'">
    <PropertyGroup>
      <ModuleFolder>$(OutputPath)\$(AssemblyName)\</ModuleFolder>
      <DestinationModuleManifest>$(ModuleFolder)$(AssemblyName).psd1</DestinationModuleManifest>
    </PropertyGroup>
    <ItemGroup>
      <CopyFiles Include="$(OutputPath)\*.dll" />
      <CopyFiles Include="@(Content)" />
      <_ModuleManifestFileLines Include="@{" />
      <_ModuleManifestFileLines Include="    RootModule      = '$(PowerShellRootModule)'" />
      <_ModuleManifestFileLines Include="    ModuleVersion   = '$(PowerShellModuleVersion)'" />
      <_ModuleManifestFileLines Include="    GUID            = '$(PowerShellGuid)'" />
      <_ModuleManifestFileLines Include="    Author          = '$(PowerShellAuthor)'" />
      <_ModuleManifestFileLines Include="    CompanyName     = '$(PowerShellCompanyName)'" />
      <_ModuleManifestFileLines Include="    Copyright       = '$(PowerShellCopyright)'" />
      <_ModuleManifestFileLines Include="    CmdletsToExport = '$(PowerShellCmdletsToExport)'" />
      <_ModuleManifestFileLines Include="    AliasesToExport = '$(PowerShellAliasesToExport)'" />
      <_ModuleManifestFileLines Include="}" />
    </ItemGroup>
    <MakeDir Directories="$(ModuleFolder)" />
    <Copy SourceFiles="@(CopyFiles)" DestinationFolder="$(ModuleFolder)" OverwriteReadOnlyFiles="true" />
    <WriteLinesToFile Lines="@(_ModuleManifestFileLines)" File="$(DestinationModuleManifest)" Overwrite="true" />
  </Target>

  <ItemGroup>
    <Reference Include="System.Xaml">
      <Private>false</Private>
    </Reference>
    <Reference Include="WindowsBase">
      <Private>false</Private>
    </Reference>
    <Reference Include="PresentationCore">
      <Private>false</Private>
    </Reference>
    <Reference Include="PresentationFramework">
      <Private>false</Private>
    </Reference>
    <Reference Include="System">
      <Private>false</Private>
    </Reference>
    <Reference Include="System.Xml">
      <Private>false</Private>
    </Reference>
    <Reference Include="System.Xml.Linq">
      <Private>false</Private>
    </Reference>
    <Reference Include="System.Core">
      <Private>false</Private>
    </Reference>
    <Reference Include="System.Drawing">
      <Private>false</Private>
    </Reference>
    <Reference Include="System.Design">
      <Private>false</Private>
    </Reference>
    <Reference Include="Microsoft.CSharp">
      <Private>false</Private>
    </Reference>
    <Reference Include="System.ComponentModel.Composition">
      <Private>false</Private>
    </Reference>
  </ItemGroup>

  <Choose>
    <When Condition="
             '$(MSBuildProjectName)' == 'Microsoft.VisualStudio.Extensibility.EditorMargin'
          or '$(MSBuildProjectName)' == 'Microsoft.VisualStudio.Extensibility.PasteAsCommands'
          or '$(MSBuildProjectName)' == 'Microsoft.VisualStudio.Extensibility.TemplateWizards'
          or '$(MSBuildProjectName)' == 'Microsoft.VisualStudio.Extensibility.OpenOutput'
          ">
      <ItemGroup>
        <PackageReference Include="EnvDTE" />
        <PackageReference Include="EnvDTE80" />
        <PackageReference Include="stdole" />
        <Reference Include="Microsoft.VisualStudio.CommandBars" />
        <PackageReference Include="Microsoft.VisualStudio.ComponentModelHost"  />
        <PackageReference Include="Microsoft.VisualStudio.Shell.15.0" />
        <PackageReference Include="Microsoft.VisualStudio.Shell.Embeddable" />
        <PackageReference Include="Microsoft.VisualStudio.Shell.Design" />
        <PackageReference Include="Microsoft.VisualStudio.Shell.Framework" />
        <PackageReference Include="Microsoft.VisualStudio.OLE.Interop" />
        <PackageReference Include="Microsoft.VisualStudio.Shell.Interop" />
        <PackageReference Include="Microsoft.VisualStudio.Shell.Interop.8.0" />
        <PackageReference Include="Microsoft.VisualStudio.Shell.Interop.9.0" />
        <PackageReference Include="Microsoft.VisualStudio.Shell.Interop.10.0" />
        <PackageReference Include="Microsoft.VisualStudio.Shell.Interop.11.0" />
        <PackageReference Include="Microsoft.VisualStudio.Shell.Interop.12.0" />
        <PackageReference Include="Microsoft.VisualStudio.CoreUtility" />
        <PackageReference Include="Microsoft.VisualStudio.Threading" />
        <PackageReference Include="Microsoft.VisualStudio.Validation" />
        <PackageReference Include="Microsoft.VisualStudio.Text.Data" />
        <PackageReference Include="Microsoft.VisualStudio.Text.Logic" />
        <PackageReference Include="Microsoft.VisualStudio.Text.UI" />
        <PackageReference Include="Microsoft.VisualStudio.Text.UI.Wpf" />
        <PackageReference Include="Microsoft.VisualStudio.TextManager.Interop" />
        <PackageReference Include="Microsoft.VisualStudio.TextManager.Interop.8.0" />
      </ItemGroup>
    </When>
  </Choose>

  <Choose>
    <When Condition="'$(MSBuildProjectName)' == 'Microsoft.VisualStudio.Extensibility.OpenOutput'">
      <ItemGroup>
        <Reference Include="Microsoft.Build" />
        <Reference Include="Microsoft.Build.Framework" />
        <PackageReference Include="Microsoft.Tpl.Dataflow"/>
        <PackageReference Include="Microsoft.VisualStudio.ProjectSystem"  />
        <!--<PackageReference Include="Microsoft.VisualStudio.ProjectSystem.VS" />-->
        <PackageReference Include="Microsoft.VisualStudio.Composition" />
        <PackageReference Include="Microsoft.VisualStudio.Composition.Configuration" />
      </ItemGroup>
    </When>
  </Choose>

  <Choose>
    <When Condition="'$(MSBuildProjectName)' == 'Microsoft.VisualStudio.Extensibility.TemplateWizards'">
      <ItemGroup>
        <Reference Include="Microsoft.VisualStudio.TemplateWizardInterface"  />
      </ItemGroup>
    </When>
  </Choose>

  <Import Project="$(CustomBeforeCentralPackageVersionsTargets)" Condition=" '$(CustomBeforeCentralPackageVersionsTargets)' != '' And Exists('$(CustomBeforeCentralPackageVersionsTargets)') " />
  <PropertyGroup Condition=" '$(EnableCentralPackageVersions)' != 'false' ">
    <CentralPackagesFile Condition=" '$(CentralPackagesFile)' == '' ">$([MSBuild]::GetPathOfFileAbove('Packages.props', $(MSBuildProjectDirectory)))</CentralPackagesFile>
    <EnableCentralPackageVersions Condition=" !Exists('$(CentralPackagesFile)') ">false</EnableCentralPackageVersions>
  </PropertyGroup>
  <ItemGroup Condition=" '$(EnableCentralPackageVersions)' != 'false' ">
    <!-- Stores the package versions specified in individual projects -->
    <ProjectSpecifiedPackageVersion Include="@(PackageVersion)" />
  </ItemGroup>
  <PropertyGroup Condition=" '$(EnableCentralPackageVersions)' != 'false' ">
    <MSBuildAllProjects>$(MSBuildThisFileFullPath);$(MSBuildAllProjects)</MSBuildAllProjects>
    <MSBuildAllProjects Condition=" Exists('$(CentralPackagesFile)') ">$(CentralPackagesFile);$(MSBuildAllProjects)</MSBuildAllProjects>
  </PropertyGroup>
  <Import Project="$(CentralPackagesFile)" Condition=" '$(EnableCentralPackageVersions)' != 'false' " />
  <ItemGroup Condition=" '$(EnableCentralPackageVersions)' != 'false' ">
    <!-- Clear package versions that are duplicated from a project and the central package versions file -->
    <PackageVersion Remove="@(ProjectSpecifiedPackageVersion)" />
    <!-- Add back the project specified package versions -->
    <PackageVersion Include="@(ProjectSpecifiedPackageVersion)" />
    <!-- Stores the original package references used later to determine if there are any problems -->
    <OriginalPackageReference Include="@(PackageReference)" />
    <!-- Add global package references -->
    <PackageReference Include="@(GlobalPackageReference)" />
    <!-- Store all PackageVersion items that do not have a PackageReference -->
    <_PackagesNotReferenced Include="@(PackageVersion)" Exclude="@(PackageReference)" />
    <!-- Clear the PackageReference list -->
    <PackageReference Remove="@(OriginalPackageReference);@(GlobalPackageReference)" />
    <!-- Add back the PackageReference its from the list that contains versions, excluding the items not referenced -->
    <PackageReference Include="@(PackageVersion)" Exclude="@(_PackagesNotReferenced)" />
    <!-- Clear the temporary list of items not referenced -->
    <_PackagesNotReferenced Remove="@(_PackagesNotReferenced)" />
  </ItemGroup>
  <Target Name="CheckPackageReferences"
    Condition=" '$(EnableCentralPackageVersions)' != 'false' And '@(PackageReference)' != '' ">
    <ItemGroup>
      <!--
        Determine all of the original PackageReference items that did not have a PackageVersion
      -->
      <MissingPackageReference Include="@(OriginalPackageReference)" Exclude="@(PackageVersion)" />
      <!--
        Determine all of the PackageReference items that are already declared as GlobalPackageReference items.
      -->
    </ItemGroup>
    <!--
      Generate an error if any PackageReference has a version specified and its not an implicit item
     -->
    <Error
      Text="The package reference '%(OriginalPackageReference.Identity)' should not specify a version.  Please specify the version in '$(CentralPackagesFile)'."

      File="$(MSBuildProjectFullPath) "/>
    <!--
      Generate an error if any explicit PackageReference did not have matching PackageVersion
     -->
    <Error
      Text="The package reference '%(MissingPackageReference.Identity)' must have a version defined in '$(CentralPackagesFile)'."

      File="$(MSBuildProjectFullPath)" />
    <!--
      Generate an error if any implicit PackageReference did not have matching PackageVersion
     -->
    <Error
      Text="The implicit package reference '%(MissingPackageReference.Identity)' must have a version defined in '$(CentralPackagesFile)'."

      File="$(MSBuildProjectFullPath)" />
    <!--
      Generate an error if any project specified a PackageReference and there is already the same GlobalPackageReference
     -->
    <Error
      Text="The package reference '%(DuplicateGlobalPackageReference.Identity)' is already defined as a GlobalPackageReference in '$(CentralPackagesFile)'.  Individual projects do not need to include a PackageReference if a GlobalPackageReference is declared."

      File="$(MSBuildProjectFullPath)" />
  </Target>
  <Import Project="$(CustomAfterCentralPackageVersionsTargets)" Condition=" '$(CustomAfterCentralPackageVersionsTargets)' != '' And Exists('$(CustomAfterCentralPackageVersionsTargets)') " />


</Project>
